{"version":3,"sources":["components/Login.js","reducer/Board.js","api.js","hook/UseBoard.js","context/BoardContext.js","components/board/BoardInput.js","components/todo/TodoInput.js","components/todo/TodoCheck.js","components/todo/TodoRemove.js","components/todo/TodoContent.js","components/todo/TodoList.js","components/board/BoardRemove.js","components/board/BoardTitle.js","components/board/BoardList.js","components/board/BoardSection.js","components/board/Board.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Login","setIsLogin","userId","setUserId","handleButtonClick","alert","handleKeyPress","e","target","matches","key","className","map","input","idx","htmlFor","type","placeholder","onChange","value","handlechange","onKeyPress","onClick","initialState","boardsState","todosState","loading","reducer","state","action","boards","todos","newBoards","filter","board","id","todo","boardId","newTodos","checkTodo","completed","api","axios","create","host","trelloApi","get","post","then","res","delete","patch","UseBoard","useReducer","dispatch","useEffect","a","boardData","todoData","status","data","console","log","boardFunc","createBoard","title","trim","length","Math","max","removeBoard","todoId","parentNode","content","floor","random","BoardContext","React","createContext","BoardInput","useContext","TodoInput","createTodo","TodoCheck","checked","TodoRemove","removeTodo","TodoContent","TodoList","BoardRemove","BoardTitle","BoardList","BoardSection","Board","Provider","Header","isLogin","userLogOut","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65afb000.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Login.css';\n\nconst Login = ({ setIsLogin, userId, setUserId }) => {\n  const userInput = ['id', 'password'];\n\n  const handlechange = (key, e) => {\n    if (key === 'id') {\n      setUserId(e.target.value);\n    }\n  };\n\n  const handleButtonClick = () => {\n    alert(`${userId}님 로그인 되었습니다`);\n    setIsLogin(true);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.target.matches('.password') && e.key === 'Enter') {\n      handleButtonClick();\n    }\n  };\n  return (\n    <>\n      <div className=\"login-container\">\n        <form className=\"form-container\">\n          <fieldset>\n            <legend>회원가입 폼</legend>\n            {userInput.map((input, idx) => (\n              <label htmlFor={input} key={`input${idx}`}>\n                <span className=\"a11y-hidden\">{input}</span>\n                <input\n                  type={input === 'password' ? 'password' : 'text'}\n                  className={input}\n                  placeholder={`${input}를 입력하세요`}\n                  onChange={(e) => handlechange(input, e)}\n                  onKeyPress={handleKeyPress}\n                />\n              </label>\n            ))}\n            <button type=\"button\" className=\"btn\" onClick={handleButtonClick}>\n              로그인\n            </button>\n          </fieldset>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default Login;\n","export const initialState = {\n  boardsState: [],\n  todosState: [],\n  loading: false,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        boardsState: initialState.boardsState,\n        todosState: initialState.todosState,\n        loading: true,\n      };\n    case 'SUCCESS':\n      return {\n        boardsState: action.boards,\n        todosState: action.todos,\n        loading: initialState.loading,\n      };\n    case 'CREATE_BOARD':\n      return {\n        boardsState: [...state.boardsState, action.newBoards],\n        todosState: state.todosState,\n        loading: initialState.loading,\n      };\n    case 'DELETE_BOARD':\n      return {\n        boardsState: state.boardsState.filter(\n          (board) => board.id !== action.id,\n        ),\n        todosState: state.todosState.filter(\n          (todo) => todo.boardId !== action.id,\n        ),\n        loading: initialState.loading,\n      };\n    case 'CREATE_TODO':\n      return {\n        boardsState: state.boardsState,\n        todosState: [...state.todosState, action.newTodos],\n        loading: initialState.loading,\n      };\n    case 'CHECK_TODO':\n      return {\n        boardsState: state.boardsState,\n        todosState: state.todosState.map((todo) =>\n          todo.id === action.checkTodo.id\n            ? { ...todo, completed: !todo.completed }\n            : todo,\n        ),\n        loading: initialState.loading,\n      };\n    case 'DELETE_TODO':\n      return {\n        boardsState: state.boardsState,\n        todosState: state.todosState.filter((todo) => todo.id !== action.id),\n        loading: initialState.loading,\n      };\n    default:\n      return null;\n  }\n};\n","import axios from 'axios';\n\nconst api = axios.create({\n  host: 'http://localhost:5000',\n});\n\nexport const trelloApi = {\n  getBoard: () => api.get('/boardsState'),\n  getTodos: () => api.get('/todosState'),\n  createBoard: (board) => api.post(`/boardsState/`, board).then((res) => res),\n  removeBoard: (id) => api.delete(`/boardsState/${id}`).then((res) => res),\n  createTodo: (todos) => api.post(`todosState/`, todos).then((res) => res),\n  checkTodo: ({ id, completed }) =>\n    api.patch(`/todosState/${id}`, { completed }).then((res) => res),\n  removeTodo: (id) => api.delete(`/todosState/${id}`).then((res) => res),\n};\n","import { useReducer, useEffect } from 'react';\nimport { initialState, reducer } from '../reducer/Board';\nimport { trelloApi } from '../api';\n\nconst UseBoard = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const boardFunc = async () => {\n      try {\n        dispatch({ type: 'LOADING' });\n        let boardData = await trelloApi.getBoard();\n        let todoData = await trelloApi.getTodos();\n        if (boardData.status === 200) {\n          dispatch({\n            type: 'SUCCESS',\n            boards: boardData.data,\n            todos: todoData.data,\n          });\n        }\n      } catch (error) {\n        console.log('err');\n      }\n    };\n    boardFunc();\n  }, []);\n\n  const generateBoardId = () =>\n    state.boardsState.length\n      ? Math.max(...state.boardsState.map((board) => board.id)) + 1\n      : 1;\n\n  const createBoard = async (e) => {\n    const title = e.target.value.trim();\n    if (title === '' || e.key !== 'Enter') return;\n    const newBoards = { id: generateBoardId(), title: title };\n    e.target.value = '';\n    try {\n      await trelloApi.createBoard(newBoards);\n      dispatch({ type: 'CREATE_BOARD', newBoards: newBoards });\n    } catch (error) {\n      console.log('err');\n    }\n  };\n\n  const removeBoard = async (id) => {\n    const todoId = state.todosState\n      .filter((todo) => todo.boardId === id)\n      .map((todo) => todo.id);\n    try {\n      await trelloApi.removeBoard(id);\n      dispatch({\n        type: 'DELETE_BOARD',\n        id: id,\n      });\n      await todoId.map((id) => trelloApi.removeTodo(id));\n      dispatch({\n        type: 'DELETE_TODO',\n        id: todoId,\n      });\n    } catch (error) {\n      console.log('err');\n    }\n  };\n\n  const createTodo = async (e) => {\n    const boardId = +e.target.parentNode.id;\n    const content = e.target.value.trim();\n    const newTodos = {\n      boardId: boardId,\n      id: Math.floor(boardId * Math.random() * 10000),\n      content: content,\n      completed: false,\n    };\n    if (content === '' || e.key !== 'Enter') return;\n    e.target.value = '';\n    try {\n      await trelloApi.createTodo(newTodos);\n      dispatch({\n        type: 'CREATE_TODO',\n        newTodos: newTodos,\n      });\n    } catch (error) {\n      console.log('err');\n    }\n  };\n\n  const checkTodo = async (todo) => {\n    const checkTodo = {\n      id: todo.id,\n      completed: !todo.completed,\n    };\n    try {\n      await trelloApi.checkTodo(checkTodo);\n      dispatch({\n        type: 'CHECK_TODO',\n        checkTodo: checkTodo,\n      });\n    } catch (error) {\n      console.log('err');\n    }\n  };\n\n  const removeTodo = async (id) => {\n    try {\n      await trelloApi.removeTodo(id);\n      dispatch({\n        type: 'DELETE_TODO',\n        id: id,\n      });\n    } catch (error) {\n      console.log('err');\n    }\n  };\n  return [state, createBoard, removeBoard, createTodo, checkTodo, removeTodo];\n};\n\nexport default UseBoard;\n","import React from 'react';\nimport { initialState } from '../reducer/Board';\n\nconst BoardContext = React.createContext({\n  state: initialState,\n  dispatch: () => {},\n});\n\nexport default BoardContext;\n","import React, { useContext } from 'react';\nimport '../../styles/board/BoardInput.css';\nimport BoardContext from '../../context/BoardContext';\n\nconst BoardInput = () => {\n  const context = useContext(BoardContext);\n  const { createBoard } = context;\n  return (\n    <section className=\"inputBoard\">\n      <input\n        type=\"text\"\n        className=\"newInputBoard\"\n        placeholder=\"생성할 보드의 이름을 작성하세요\"\n        onKeyPress={createBoard}\n      />\n    </section>\n  );\n};\n\nexport default BoardInput;\n","import React, { useContext } from 'react';\nimport '../../styles/todo/TodoInput.css';\nimport BoardContext from '../../context/BoardContext';\n\nconst TodoInput = () => {\n  const context = useContext(BoardContext);\n  const { createTodo } = context;\n  return (\n    <input\n      type=\"text\"\n      className=\"inputTodo\"\n      onKeyPress={createTodo}\n      placeholder=\"할 일을 입력하세요\"\n    ></input>\n  );\n};\n\nexport default TodoInput;\n","import React, { useContext } from 'react';\nimport '../../styles/todo/TodoCheck.css';\nimport BoardContext from '../../context/BoardContext';\n\nconst TodoCheck = ({ todo }) => {\n  const context = useContext(BoardContext);\n  const { checkTodo } = context;\n  return (\n    <>\n      <input\n        id={`todo-${todo.id}`}\n        type=\"checkbox\"\n        className=\"checkbox\"\n        checked={todo.completed ? 'checked' : ''}\n        onChange={() => checkTodo(todo)}\n      />\n      <label htmlFor={`todo-${todo.id}`}></label>\n    </>\n  );\n};\n\nexport default TodoCheck;\n","import React, { useContext } from 'react';\nimport '../../styles/todo/TodoRemove.css';\nimport BoardContext from '../../context/BoardContext';\n\nconst TodoRemove = ({ todo }) => {\n  const context = useContext(BoardContext);\n  const { removeTodo } = context;\n  return (\n    <button\n      type=\"button\"\n      onClick={() => removeTodo(todo.id)}\n      className=\"todo-remove\"\n    >\n      X\n    </button>\n  );\n};\n\nexport default TodoRemove;\n","import React from 'react';\nimport '../../styles/todo/TodoContent.css';\n\nconst TodoContent = ({ todo }) => {\n  return (\n    <span className=\"todo-content\">\n      {todo.completed ? (\n        <span className=\"completed-check\">{todo.content}</span>\n      ) : (\n        <>{todo.content}</>\n      )}\n    </span>\n  );\n};\n\nexport default TodoContent;\n","import React from 'react';\nimport '../../styles/todo/TodoList.css';\nimport TodoCheck from './TodoCheck';\nimport TodoRemove from './TodoRemove';\nimport TodoContent from './TodoContent';\n\nconst TodoList = ({ todo }) => {\n  return (\n    <li key={todo.id} id={todo.id} className=\"todos\">\n      <TodoCheck todo={todo} />\n      <TodoContent todo={todo} />\n      <TodoRemove todo={todo} />\n    </li>\n  );\n};\n\nexport default TodoList;\n","import React, { useContext } from 'react';\nimport '../../styles/board/BoardRemove.css';\nimport BoardContext from '../../context/BoardContext';\n\nconst BoardRemove = ({ board }) => {\n  const context = useContext(BoardContext);\n  const { removeBoard } = context;\n  return (\n    <button\n      type=\"button\"\n      className=\"removeBtn\"\n      onClick={() => removeBoard(board.id)}\n    >\n      X\n    </button>\n  );\n};\n\nexport default BoardRemove;\n","import React from 'react';\nimport '../../styles/board/BoardTitle.css';\n\nconst BoardTitle = ({ board }) => {\n  return <span className=\"board-title\">{board.title}</span>;\n};\n\nexport default BoardTitle;\n","import React, { useContext } from 'react';\nimport '../../styles/board/BoardList.css';\nimport TodoInput from '../todo/TodoInput';\nimport TodoList from '../todo/TodoList';\nimport BoardRemove from './BoardRemove';\nimport BoardTitle from './BoardTitle';\nimport BoardContext from '../../context/BoardContext';\n\nconst BoardList = ({ board }) => {\n  const context = useContext(BoardContext);\n  const { state } = context;\n  return (\n    <ul key={board.id} id={board.id} className=\"boardCard\">\n      <BoardTitle board={board} />\n      <BoardRemove board={board} />\n      {state.todosState.map(\n        (todo) =>\n          todo.boardId === board.id && (\n            <TodoList key={todo.id} todo={todo}></TodoList>\n          ),\n      )}\n      <TodoInput />\n    </ul>\n  );\n};\n\nexport default BoardList;\n","import React, { useContext } from 'react';\nimport '../../styles/board/BoardSection.css';\nimport BoardList from './BoardList';\nimport BoardContext from '../../context/BoardContext';\n\nconst BoardSection = () => {\n  const context = useContext(BoardContext);\n  const { state } = context;\n  return (\n    <section className=\"boardSection\">\n      {state.boardsState.map((board) => (\n        <BoardList board={board} key={board.id} />\n      ))}\n    </section>\n  );\n};\n\nexport default BoardSection;\n","import React from 'react';\nimport '../../styles/board/Board.css';\nimport UseBoard from '../../hook/UseBoard';\nimport BoardInput from './BoardInput';\nimport BoardSection from './BoardSection';\nimport BoardContext from '../../context/BoardContext';\n\nconst Board = () => {\n  const [\n    state,\n    createBoard,\n    removeBoard,\n    createTodo,\n    checkTodo,\n    removeTodo,\n  ] = UseBoard();\n\n  const data = {\n    state,\n    createBoard,\n    removeBoard,\n    createTodo,\n    checkTodo,\n    removeTodo,\n  };\n\n  return (\n    <div className=\"boardContainer\">\n      <BoardContext.Provider value={data}>\n        <BoardInput />\n        <BoardSection />\n      </BoardContext.Provider>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport '../styles/Header.css';\n\nconst Header = ({ isLogin, userId, userLogOut }) => {\n  return (\n    <>\n      {isLogin === false ? (\n        <header>SignUp</header>\n      ) : (\n        <header>\n          <span>{userId}님 좋은 하루 되세요</span>\n          <span className=\"logout\" onClick={userLogOut}>\n            LogOut\n          </span>\n        </header>\n      )}\n      <div className=\"title-container\">\n        <span className=\"title\">SIMPLE TRELLO!</span>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport Login from './components/Login';\nimport Board from './components/board/Board';\nimport Header from './components/Header';\n\nconst App = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [userId, setUserId] = useState('');\n\n  const userLogOut = () => {\n    alert(`${userId}님 안녕히 가세요`);\n    setIsLogin(false);\n    setUserId('');\n  };\n  return (\n    <>\n      <Header isLogin={isLogin} userId={userId} userLogOut={userLogOut} />\n      {isLogin === false ? (\n        <Login setIsLogin={setIsLogin} userId={userId} setUserId={setUserId} />\n      ) : (\n        <Board setIsLogin={setIsLogin} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}